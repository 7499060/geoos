package buffer

import (
	"testing"

	"github.com/spatial-go/geoos/algorithm/matrix"
)

func TestBuffer(t *testing.T) {
	type args struct {
		geom     matrix.Steric
		distance float64
		quadsegs int
	}
	tests := []struct {
		name string
		args args
		want matrix.Steric
	}{
		{name: "point buffer", args: args{
			geom:     matrix.Matrix{100, 90},
			distance: 50,
			quadsegs: 4,
		}, want: matrix.PolygonMatrix{
			{{150, 90}, {146.193976625564, 70.8658283817455}, {135.355339059327, 54.6446609406727},
				{119.134171618255, 43.8060233744357}, {100, 40}, {80.8658283817456, 43.8060233744356}, {64.6446609406727, 54.6446609406725},
				{53.8060233744357, 70.8658283817454}, {50, 89.9999999999998}, {53.8060233744356, 109.134171618254}, {64.6446609406725, 125.355339059327},
				{80.8658283817453, 136.193976625564}, {99.9999999999998, 140}, {119.134171618254, 136.193976625564}, {135.355339059327, 125.355339059328},
				{146.193976625564, 109.134171618255}, {150, 90}},
		},
		},

		{name: "line buffer", args: args{
			geom:     matrix.LineMatrix{{100, 100}, {300, 300}},
			distance: 50,
			quadsegs: 4,
		}, want: matrix.PolygonMatrix{

			{{264.6446609406726, 335.3553390593274}, {280.8658283817456, 346.19397662556435}, {300.00000000000006, 350}, {319.1341716182545, 346.19397662556435}, {
				335.3553390593274, 335.3553390593274}, {346.19397662556435, 319.1341716182545}, {350, 300.00000000000006}, {346.19397662556435, 280.8658283817456}, {
				335.3553390593274, 264.6446609406726}, {135.35533905932738, 64.64466094067262}, {119.13417161825444, 53.80602337443564}, {99.99999999999997, 50}, {
				80.8658283817455, 53.80602337443566}, {64.64466094067262, 64.64466094067262}, {53.806023374435675, 80.86582838174549}, {50, 99.99999999999994}, {
				53.80602337443563, 119.13417161825441}, {64.64466094067262, 135.35533905932738}, {264.6446609406726, 335.3553390593274}},
		},
		},

		{name: "poly buffer", args: args{
			geom:     matrix.PolygonMatrix{{{100, 100}, {100, 200}, {200, 200}, {200, 100}, {100, 100}}},
			distance: 50,
			quadsegs: 4,
		}, want: matrix.PolygonMatrix{
			{{100, 50}, {80.86582838174527, 53.80602337443576}, {64.64466094067251, 64.64466094067274}, {53.80602337443563, 80.86582838174559}, {50, 100}, {50, 200}, {
				53.80602337443566, 219.1341716182545}, {64.64466094067262, 235.35533905932738}, {80.86582838174552, 246.19397662556435}, {100, 250}, {200, 250}, {
				219.1341716182545, 246.19397662556435}, {235.35533905932738, 235.35533905932738}, {246.19397662556435, 219.1341716182545}, {250, 200}, {250, 100}, {
				246.19397662556435, 80.86582838174552}, {235.35533905932738, 64.64466094067262}, {219.1341716182545, 53.80602337443566}, {200, 50}, {100, 50}},
		},
		},

		{name: "multi point buffer", args: args{
			geom:     matrix.Collection{matrix.Matrix{100, 100}, matrix.Matrix{200, 200}},
			distance: 50,
			quadsegs: 4,
		}, want: matrix.PolygonMatrix{
			{{150, 100}, {146.19397662556435, 80.86582838174553}, {135.3553390593274, 64.64466094067265}, {119.13417161825454, 53.80602337443568}, {100.00000000000009, 50}, {
				80.86582838174562, 53.806023374435625}, {64.64466094067271, 64.64466094067254}, {53.80602337443571, 80.86582838174539}, {50, 99.99999999999984}, {
				53.80602337443559, 119.13417161825431}, {64.64466094067248, 135.35533905932724}, {80.86582838174532, 146.19397662556426}, {99.99999999999977, 150}, {
				119.13417161825426, 146.19397662556443}, {135.35533905932718, 135.35533905932758}, {146.19397662556423, 119.13417161825477}, {150, 100}},
		},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Buffer(tt.args.geom, tt.args.distance, tt.args.quadsegs); !got.EqualsExact(tt.want, 0.000001) {
				t.Errorf("Buffer() = %v,\n want %v", got, tt.want)
			}
		})
	}
}
